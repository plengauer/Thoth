if ! which node; then exit 0; fi
. ./assert.sh

. otel.sh

node -e "const child_process = require('child_process'); child_process.exec('echo hello world 0', {}, (error, stdout, stderr) => { console.log(stdout); console.error(stderr); });"
assert_equals 0 $?
span="$(resolve_span '.name == "echo hello world 0"')"
assert_equals "SpanKind.INTERNAL" $(\echo "$span" | jq -r '.kind')
assert_not_equals null $(\echo "$span" | jq -r '.parent_id')

node -e "const child_process = require('child_process'); child_process.exec('echo hello world 1', {});"
assert_equals 0 $?
span="$(resolve_span '.name == "echo hello world 1"')"
assert_equals "SpanKind.INTERNAL" $(\echo "$span" | jq -r '.kind')
assert_not_equals null $(\echo "$span" | jq -r '.parent_id')

node -e "const child_process = require('child_process'); child_process.exec('echo hello world 2', (error, stdout, stderr) => { console.log(stdout); console.error(stderr); });"
assert_equals 0 $?
span="$(resolve_span '.name == "echo hello world 2"')"
assert_equals "SpanKind.INTERNAL" $(\echo "$span" | jq -r '.kind')
assert_not_equals null $(\echo "$span" | jq -r '.parent_id')

node -e "const child_process = require('child_process'); child_process.exec('echo hello world 3');"
assert_equals 0 $?
span="$(resolve_span '.name == "echo hello world 3"')"
assert_equals "SpanKind.INTERNAL" $(\echo "$span" | jq -r '.kind')
assert_not_equals null $(\echo "$span" | jq -r '.parent_id')

node -e "const child_process = require('child_process'); child_process.spawn('echo', [ 'hello', 'world', '4' ], { stdio: 'inherit' });"
assert_equals 0 $?
span="$(resolve_span '.name == "echo hello world 4"')"
assert_equals "SpanKind.INTERNAL" $(\echo "$span" | jq -r '.kind')
assert_not_equals null $(\echo "$span" | jq -r '.parent_id')

node -e "const child_process = require('child_process'); child_process.spawn('echo', [ 'hello', 'world', '5' ]);"
assert_equals 0 $?
span="$(resolve_span '.name == "echo hello world 5"')"
assert_equals "SpanKind.INTERNAL" $(\echo "$span" | jq -r '.kind')
assert_not_equals null $(\echo "$span" | jq -r '.parent_id')

node -e "const child_process = require('child_process'); child_process.spawn('echo', { stdio: 'inherit' });"
assert_equals 0 $?
span="$(resolve_span '.name == "echo"')"
assert_equals "SpanKind.INTERNAL" $(\echo "$span" | jq -r '.kind')
assert_not_equals null $(\echo "$span" | jq -r '.parent_id')

type npm || exit 1

OTEL_SHELL_EXPERIMENTAL_INJECT_DEEP=TRUE node -e "const child_process = require('child_process'); child_process.spawn('echo', [ 'hello', 'world', '6' ]);"
assert_equals 0 $?
span="$(resolve_span '.name == "echo hello world 6"')"
assert_equals "SpanKind.INTERNAL" $(\echo "$span" | jq -r '.kind')
assert_not_equals null $(\echo "$span" | jq -r '.parent_id')
# assert_equals $(resolve_span '.name == "echo hello world 6"' | jq -r .parent_id) $(resolve_span '.name == "TODO"' | jq -r .id)

directory="$(mktemp -d)"
echo "
const https = require('https');
const options = {
  hostname: 'example.com',
  port: 443,
  path: '/',
  method: 'GET'
};
const req = https.request(options, (res) => {});
req.end();
" > "$directory"/index.js
span="$(OTEL_SHELL_EXPERIMENTAL_INJECT_DEEP=TRUE node "$directory"/index.js 2>&1)"
assert_equals 0 $?
\echo "$span"
assert_equals "GET" $(\echo "$span" | grep -E '^  name:' | cut -d ':' -f 2- | tr -d \''" ,')
# assert_not_equals undefined $(\echo "$span" | grep parentId | cut -d ':' -f 2- | tr -d \''" ,') # TODO known bug in otel

directory="$(mktemp -d)"
echo "
const { NodeSDK } = require('@opentelemetry/sdk-node');
const { ConsoleSpanExporter } = require('@opentelemetry/sdk-trace-node');
const { getNodeAutoInstrumentations } = require('@opentelemetry/auto-instrumentations-node');
const sdk = new NodeSDK({
  traceExporter: new ConsoleSpanExporter(),
  instrumentations: [getNodeAutoInstrumentations()],
  resourceDetectors: []
});
sdk.start();
process.on('exit', () => sdk.shutdown());
const https = require('https');
const options = {
  hostname: 'example.com',
  port: 443,
  path: '/',
  method: 'GET'
};
const req = https.request(options, (res) => {});
req.end();
" > "$directory"/index.js
(cd "$directory" && npm install @opentelemetry/api @opentelemetry/sdk-node @opentelemetry/sdk-trace-node @opentelemetry/auto-instrumentations-node)
span="$(OTEL_SHELL_EXPERIMENTAL_INJECT_DEEP=TRUE node "$directory"/index.js 2>&1)"
assert_equals 0 $?
\echo "$span"
assert_equals "GET" $(\echo "$span" | grep -E '^  name:' | cut -d ':' -f 2- | tr -d \''" ,')
assert_not_equals undefined $(\echo "$span" | grep parentId | cut -d ':' -f 2- | tr -d \''" ,')
