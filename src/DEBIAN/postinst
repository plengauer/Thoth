#!/bin/sh -e
rm -rf /opt/opentelemetry_bash 1> /dev/null 2> /dev/null || true # clean the old install directory
if [ "${0%.post-install}" != "$0" ] || [ "${0%.post-upgrade}" != "$0" ]; then set -- configure "$@"; fi
if [ "$1" = 0 ] || [ "$1" = 1 ] || [ "$1" = 2 ]; then set -- configure; fi
if [ "$1" = 'abort-configure' ] || [ "$1" = 'abort-upgrade' ] || [ "$1" = 'abort-remove' ] || [ "$1" = 'abort-deconfigure' ]; then
  true
elif [ "$1" = 'configure' ] || [ "$1" = 'triggered' ] || [ "$1" = 'reconfigure' ]; then
  export HOME="$(eval "echo ~$(whoami)")"
  if ! [ -d /opt/opentelemetry_shell/venv ] || [ "${OTEL_SHELL_CONFIG_INSTALL_ASSUME:-FALSE}" = FALSE ]; then
    python3 -m venv /opt/opentelemetry_shell/venv
    . /opt/opentelemetry_shell/venv/bin/activate
    pip3 install -r /opt/opentelemetry_shell/requirements.txt
    pip3 check
    deactivate # SKIP_DEPENDENCY_CHECK
  fi
  export PATH=/usr/local/bin:"$PATH"
  if type node; then
    rm -rf /usr/share/opentelemetry_shell/agent.instrumentation.node/*/
    ( type docker 1>&2 || [ "$GITHUB_ACTIONS" = true ] || ( echo "$PATH" | tr : '\n' | while read -r directory; do find "$directory" -name node; done | while read -r executable; do eval "$executable --version"; done | tr -d v | cut -d . -f 1 ) ) \
      | while read -r version; do echo "./$version"; done | ( xargs tar -xJf /usr/share/opentelemetry_shell/agent.instrumentation.node/node_modules.tar.xz -C /usr/share/opentelemetry_shell/agent.instrumentation.node/ || true )
    ls /usr/share/opentelemetry_shell/agent.instrumentation.node | grep -v '.json$' | grep -v '.js$' | grep -v '.xz$' | while read -r directory; do
      ls /usr/share/opentelemetry_shell/agent.instrumentation.node | grep '.js$' | while read -r file; do
        cp /usr/share/opentelemetry_shell/agent.instrumentation.node/"$file" /usr/share/opentelemetry_shell/agent.instrumentation.node/"$directory"/"$file"
      done
    done
  fi
  if type python3; then
    rm -rf /usr/share/opentelemetry_shell/agent.instrumentation.python/*/
    ( type docker 1>&2 || ( echo "$PATH" | tr : '\n' | while read -r directory; do find "$directory" -name 'python3.*'; done | grep -v -- - | while read -r executable; do eval "$executable -V"; done | cut -d ' ' -f 2 | cut -d . -f -2 ) ) \
      | while read -r version; do echo "./$version"; done | ( xargs tar -xJf /usr/share/opentelemetry_shell/agent.instrumentation.python/python_site_packages.tar.xz -C /usr/share/opentelemetry_shell/agent.instrumentation.python/ || true )
    ls /usr/share/opentelemetry_shell/agent.instrumentation.python | grep -v '.txt$' | grep -v '.py$' | grep -v '.xz$' | while read -r version; do
      venv="$(mktemp -u)"
      if ! type python"$version" || ! eval "python$version" -m venv "$venv"; then
        rm -rf /usr/share/opentelemetry_shell/agent.instrumentation.python/"$version"
        continue
      fi
      cp -r /usr/share/opentelemetry_shell/agent.instrumentation.python/"$version"/site-packages/* "$venv"/lib/python"$version"/site-packages/
      . "$venv"/bin/activate
      pip3 install -r /usr/share/opentelemetry_shell/agent.instrumentation.python/requirements.txt
      pip3 uninstall --yes pip setuptools
      deactivate # SKIP_DEPENDENCY_CHECK
      cp -r -u "$venv"/lib/python"$version"/site-packages/* /usr/share/opentelemetry_shell/agent.instrumentation.python/"$version"/site-packages/
      rm -rf "$venv"
    done
  fi
else
  echo "$0 $*" >&2
  exit 1
fi
