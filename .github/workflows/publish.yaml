name: Publish

on:
  push:
    branches: main

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./src
    steps:
      - uses: actions/checkout@v2
      - run: sudo apt-get install devscripts debhelper
      - run: dpkg-deb --root-owner-group --build . ../package.deb
      - uses: actions/upload-artifact@v2
        with:
          name: package.deb
          path: package.deb

  test-package:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: package.deb
      - run: sudo apt-get -y install ./package.deb
      - run: sudo apt-get -y remove opentelemetry-shell

  test-debian-stable-sh:
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: package.deb
      - run: mv ./package.deb tests
      - run: sudo apt-get update
      - run: sudo apt-get remove -y containerd.io
      - run: sudo apt-get install -y docker.io runc
      - run: bash -c "cd tests && bash run_tests_containerized.sh debian:stable sh"

  test-debian-stable-ash:
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: package.deb
      - run: mv ./package.deb tests
      - run: sudo apt-get update
      - run: sudo apt-get remove -y containerd.io
      - run: sudo apt-get install -y docker.io runc
      - run: bash -c "cd tests && bash run_tests_containerized.sh debian:stable ash"

  test-debian-stable-dash:
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: package.deb
      - run: mv ./package.deb tests
      - run: sudo apt-get update
      - run: sudo apt-get remove -y containerd.io
      - run: sudo apt-get install -y docker.io runc
      - run: bash -c "cd tests && bash run_tests_containerized.sh debian:stable dash"

  test-debian-stable-bash:
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: package.deb
      - run: mv ./package.deb tests
      - run: sudo apt-get update
      - run: sudo apt-get remove -y containerd.io
      - run: sudo apt-get install -y docker.io runc
      - run: bash -c "cd tests && bash run_tests_containerized.sh debian:stable bash"

  test-debian-stable-zsh:
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: package.deb
      - run: mv ./package.deb tests
      - run: sudo apt-get update
      - run: sudo apt-get remove -y containerd.io
      - run: sudo apt-get install -y docker.io runc
      - run: bash -c "cd tests && bash run_tests_containerized.sh debian:stable zsh"

  test-debian-latest-sh:
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: package.deb
      - run: mv ./package.deb tests
      - run: sudo apt-get update
      - run: sudo apt-get remove -y containerd.io
      - run: sudo apt-get install -y docker.io runc
      - run: bash -c "cd tests && bash run_tests_containerized.sh debian:latest sh"

  test-debian-latest-ash:
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: package.deb
      - run: mv ./package.deb tests
      - run: sudo apt-get update
      - run: sudo apt-get remove -y containerd.io
      - run: sudo apt-get install -y docker.io runc
      - run: bash -c "cd tests && bash run_tests_containerized.sh debian:latest ash"

  test-debian-latest-dash:
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: package.deb
      - run: mv ./package.deb tests
      - run: sudo apt-get update
      - run: sudo apt-get remove -y containerd.io
      - run: sudo apt-get install -y docker.io runc
      - run: bash -c "cd tests && bash run_tests_containerized.sh debian:latest dash"

  test-debian-latest-bash:
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: package.deb
      - run: mv ./package.deb tests
      - run: sudo apt-get update
      - run: sudo apt-get remove -y containerd.io
      - run: sudo apt-get install -y docker.io runc
      - run: bash -c "cd tests && bash run_tests_containerized.sh debian:latest bash"

  test-debian-latest-zsh:
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: package.deb
      - run: mv ./package.deb tests
      - run: sudo apt-get update
      - run: sudo apt-get remove -y containerd.io
      - run: sudo apt-get install -y docker.io runc
      - run: bash -c "cd tests && bash run_tests_containerized.sh debian:latest zsh"

  test-debian-testing-sh:
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: package.deb
      - run: mv ./package.deb tests
      - run: sudo apt-get update
      - run: sudo apt-get remove -y containerd.io
      - run: sudo apt-get install -y docker.io runc
      - run: bash -c "cd tests && bash run_tests_containerized.sh debian:testing sh"

  test-debian-testing-ash:
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: package.deb
      - run: mv ./package.deb tests
      - run: sudo apt-get update
      - run: sudo apt-get remove -y containerd.io
      - run: sudo apt-get install -y docker.io runc
      - run: bash -c "cd tests && bash run_tests_containerized.sh debian:testing ash"

  test-debian-testing-dash:
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: package.deb
      - run: mv ./package.deb tests
      - run: sudo apt-get update
      - run: sudo apt-get remove -y containerd.io
      - run: sudo apt-get install -y docker.io runc
      - run: bash -c "cd tests && bash run_tests_containerized.sh debian:testing dash"

  test-debian-testing-bash:
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: package.deb
      - run: mv ./package.deb tests
      - run: sudo apt-get update
      - run: sudo apt-get remove -y containerd.io
      - run: sudo apt-get install -y docker.io runc
      - run: bash -c "cd tests && bash run_tests_containerized.sh debian:testing bash"

  test-debian-testing-zsh:
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: package.deb
      - run: mv ./package.deb tests
      - run: sudo apt-get update
      - run: sudo apt-get remove -y containerd.io
      - run: sudo apt-get install -y docker.io runc
      - run: bash -c "cd tests && bash run_tests_containerized.sh debian:testing zsh"

  test-ubuntu-latest-sh:
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: package.deb
      - run: mv ./package.deb tests
      - run: sudo apt-get update
      - run: sudo apt-get remove -y containerd.io
      - run: sudo apt-get install -y docker.io runc
      - run: bash -c "cd tests && bash run_tests_containerized.sh ubuntu:latest sh"

  test-ubuntu-latest-ash:
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: package.deb
      - run: mv ./package.deb tests
      - run: sudo apt-get update
      - run: sudo apt-get remove -y containerd.io
      - run: sudo apt-get install -y docker.io runc
      - run: bash -c "cd tests && bash run_tests_containerized.sh ubuntu:latest ash"

  test-ubuntu-latest-dash:
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: package.deb
      - run: mv ./package.deb tests
      - run: sudo apt-get update
      - run: sudo apt-get remove -y containerd.io
      - run: sudo apt-get install -y docker.io runc
      - run: bash -c "cd tests && bash run_tests_containerized.sh ubuntu:latest dash"

  test-ubuntu-latest-bash:
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: package.deb
      - run: mv ./package.deb tests
      - run: sudo apt-get update
      - run: sudo apt-get remove -y containerd.io
      - run: sudo apt-get install -y docker.io runc
      - run: bash -c "cd tests && bash run_tests_containerized.sh ubuntu:latest bash"

  test-ubuntu-latest-zsh:
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: package.deb
      - run: mv ./package.deb tests
      - run: sudo apt-get update
      - run: sudo apt-get remove -y containerd.io
      - run: sudo apt-get install -y docker.io runc
      - run: bash -c "cd tests && bash run_tests_containerized.sh ubuntu:latest zsh"

  test-ubuntu-rolling-sh:
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: package.deb
      - run: mv ./package.deb tests
      - run: sudo apt-get update
      - run: sudo apt-get remove -y containerd.io
      - run: sudo apt-get install -y docker.io runc
      - run: bash -c "cd tests && bash run_tests_containerized.sh ubuntu:rolling sh"

  test-ubuntu-rolling-ash:
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: package.deb
      - run: mv ./package.deb tests
      - run: sudo apt-get update
      - run: sudo apt-get remove -y containerd.io
      - run: sudo apt-get install -y docker.io runc
      - run: bash -c "cd tests && bash run_tests_containerized.sh ubuntu:rolling ash"

  test-ubuntu-rolling-dash:
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: package.deb
      - run: mv ./package.deb tests
      - run: sudo apt-get update
      - run: sudo apt-get remove -y containerd.io
      - run: sudo apt-get install -y docker.io runc
      - run: bash -c "cd tests && bash run_tests_containerized.sh ubuntu:rolling dash"

  test-ubuntu-rolling-bash:
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: package.deb
      - run: mv ./package.deb tests
      - run: sudo apt-get update
      - run: sudo apt-get remove -y containerd.io
      - run: sudo apt-get install -y docker.io runc
      - run: bash -c "cd tests && bash run_tests_containerized.sh ubuntu:rolling bash"

  test-ubuntu-rolling-zsh:
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: package.deb
      - run: mv ./package.deb tests
      - run: sudo apt-get update
      - run: sudo apt-get remove -y containerd.io
      - run: sudo apt-get install -y docker.io runc
      - run: bash -c "cd tests && bash run_tests_containerized.sh ubuntu:rolling zsh"

  test-ubuntu-devel-sh:
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: package.deb
      - run: mv ./package.deb tests
      - run: sudo apt-get update
      - run: sudo apt-get remove -y containerd.io
      - run: sudo apt-get install -y docker.io runc
      - run: bash -c "cd tests && bash run_tests_containerized.sh ubuntu:devel sh"

  test-ubuntu-devel-ash:
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: package.deb
      - run: mv ./package.deb tests
      - run: sudo apt-get update
      - run: sudo apt-get remove -y containerd.io
      - run: sudo apt-get install -y docker.io runc
      - run: bash -c "cd tests && bash run_tests_containerized.sh ubuntu:devel ash"

  test-ubuntu-devel-dash:
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: package.deb
      - run: mv ./package.deb tests
      - run: sudo apt-get update
      - run: sudo apt-get remove -y containerd.io
      - run: sudo apt-get install -y docker.io runc
      - run: bash -c "cd tests && bash run_tests_containerized.sh ubuntu:devel dash"

  test-ubuntu-devel-bash:
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: package.deb
      - run: mv ./package.deb tests
      - run: sudo apt-get update
      - run: sudo apt-get remove -y containerd.io
      - run: sudo apt-get install -y docker.io runc
      - run: bash -c "cd tests && bash run_tests_containerized.sh ubuntu:devel bash"

  test-ubuntu-devel-zsh:
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: package.deb
      - run: mv ./package.deb tests
      - run: sudo apt-get update
      - run: sudo apt-get remove -y containerd.io
      - run: sudo apt-get install -y docker.io runc
      - run: bash -c "cd tests && bash run_tests_containerized.sh ubuntu:devel zsh"

  test-debian:
    needs: [test-debian-stable-sh, test-debian-stable-ash, test-debian-stable-dash, test-debian-stable-bash, test-debian-stable-zsh, test-debian-latest-sh, test-debian-latest-ash, test-debian-latest-dash, test-debian-latest-bash, test-debian-latest-zsh]
    runs-on: ubuntu-latest
    steps:
      - run: echo debian

  test-ubuntu:
    needs: [test-ubuntu-latest-sh, test-ubuntu-latest-ash, test-ubuntu-latest-dash, test-ubuntu-latest-bash, test-ubuntu-latest-zsh, test-ubuntu-rolling-sh, test-ubuntu-rolling-ash, test-ubuntu-rolling-dash, test-ubuntu-rolling-bash, test-ubuntu-rolling-zsh]
    runs-on: ubuntu-latest
    steps:
      - run: echo ubuntu

  test-sh:
    needs: [test-debian-stable-sh, test-debian-latest-sh, test-ubuntu-latest-sh, test-ubuntu-rolling-sh]
    runs-on: ubuntu-latest
    steps:
      - run: echo sh

  test-ash:
    needs: [test-debian-stable-ash, test-debian-latest-ash, test-ubuntu-latest-ash, test-ubuntu-rolling-ash]
    runs-on: ubuntu-latest
    steps:
      - run: echo ash

  test-dash:
    needs: [test-debian-stable-dash, test-debian-latest-dash, test-ubuntu-latest-dash, test-ubuntu-rolling-dash]
    runs-on: ubuntu-latest
    steps:
      - run: echo dash

  test-bash:
    needs: [test-debian-stable-bash, test-debian-latest-bash, test-ubuntu-latest-bash, test-ubuntu-rolling-bash]
    runs-on: ubuntu-latest
    steps:
      - run: echo bash

  test-zsh:
    needs: [test-debian-stable-zsh, test-debian-latest-zsh, test-ubuntu-latest-zsh, test-ubuntu-rolling-zsh]
    runs-on: ubuntu-latest
    steps:
      - run: echo zsh

  test-shell:
    needs: [test-sh, test-ash, test-dash, test-bash, test-zsh]
    runs-on: ubuntu-latest
    steps:
      - run: echo shell

  test-os:
    needs: [test-debian, test-ubuntu]
    runs-on: ubuntu-latest
    steps:
      - run: echo os

  publish:
    needs: [build, test-package, test-shell, test-os]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: echo "::set-output name=version::$(cat ./src/DEBIAN/control | grep 'Version' | awk -F\  '{print $2}')"
        id: version
      - uses: actions/download-artifact@v2
        with:
          name: package.deb
      - uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_RELEASE_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.version }}
          release_name: Release v${{ steps.version.outputs.version }}
          draft: false
          prerelease: false
        continue-on-error: true
      - uses: actions/upload-release-asset@v1
        id: upload-release-asset
        env:
          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_RELEASE_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./package.deb
          asset_name: opentelemetry-shell_${{ steps.version.outputs.version }}.deb
          asset_content_type: application/octet-stream
        continue-on-error: true

  build_and_publish_dash:
    needs: publish
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./src_dash
    steps:
      - uses: actions/checkout@v2
      - run: echo "::set-output name=version::$(cat ./DEBIAN/control | grep 'Version' | awk -F\  '{print $2}')"
        id: version
      - run: sudo apt-get install devscripts debhelper
      - run: dpkg-deb --root-owner-group --build . ../package.deb
      - uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_RELEASE_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.version }}-dash
          release_name: Release Dash v${{ steps.version.outputs.version }}
          draft: false
          prerelease: false
        continue-on-error: true
      - uses: actions/upload-release-asset@v1
        id: upload-release-asset
        env:
          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_RELEASE_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./package.deb
          asset_name: opentelemetry-dash_${{ steps.version.outputs.version }}.deb
          asset_content_type: application/octet-stream
        continue-on-error: true

  build_and_publish_bash:
    needs: publish
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./src_bash
    steps:
      - uses: actions/checkout@v2
      - run: echo "::set-output name=version::$(cat ./DEBIAN/control | grep 'Version' | awk -F\  '{print $2}')"
        id: version
      - run: sudo apt-get install devscripts debhelper
      - run: dpkg-deb --root-owner-group --build . ../package.deb
      - uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_RELEASE_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.version }}-bash
          release_name: Release Bash v${{ steps.version.outputs.version }}
          draft: false
          prerelease: false
        continue-on-error: true
      - uses: actions/upload-release-asset@v1
        id: upload-release-asset
        env:
          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_RELEASE_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./package.deb
          asset_name: opentelemetry-bash_${{ steps.version.outputs.version }}.deb
          asset_content_type: application/octet-stream
        continue-on-error: true

  build_and_publish_zsh:
    needs: publish
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./src_zsh
    steps:
      - uses: actions/checkout@v2
      - run: echo "::set-output name=version::$(cat ./DEBIAN/control | grep 'Version' | awk -F\  '{print $2}')"
        id: version
      - run: sudo apt-get install devscripts debhelper
      - run: dpkg-deb --root-owner-group --build . ../package.deb
      - uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_RELEASE_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.version }}-zsh
          release_name: Release Zsh v${{ steps.version.outputs.version }}
          draft: false
          prerelease: false
        continue-on-error: true
      - uses: actions/upload-release-asset@v1
        id: upload-release-asset
        env:
          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_RELEASE_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./package.deb
          asset_name: opentelemetry-zsh_${{ steps.version.outputs.version }}.deb
          asset_content_type: application/octet-stream
        continue-on-error: true
