name: 'GitHub'

on:
  workflow_call:

jobs:

  job-node:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: packages
      - uses: ./actions/instrument/job
        with:
          cache: 'false'
        env:
          OTEL_SHELL_CONFIG_GITHUB_INJECT_ON_MAIN: 'TRUE'
          OTEL_SHELL_SDK_OUTPUT_REDIRECT: /dev/null
      - uses: actions/download-artifact@v4 # check if node action works
        with:
          name: packages

  job-docker:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: packages
      - uses: ./actions/instrument/job
        with:
          cache: 'false'
        env:
          OTEL_SHELL_CONFIG_GITHUB_INJECT_ON_MAIN: 'TRUE'
          OTEL_SHELL_SDK_OUTPUT_REDIRECT: /dev/null
      - uses: actions/hello-world-docker-action@main # check if docker action works
      - uses: actions/first-interaction@v1 # docker action with - in env vars
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          issue-message: "Hello, thanks for adding an issue for the first time!"
          pr-message: "Hello, thanks for contributing for the first time!"
      - uses: docker/setup-qemu-action@v3 # some docker actions have otel built-in
      - uses: docker/setup-buildx-action@v3 # some docker actions have otel built-in
      - uses: actions/download-artifact@v4
        with:
          name: packages
      - run: cp package.deb tests/package.deb
      - uses: docker/build-push-action@v6 # some docker actions have otel built-in
        with:
          context: ./tests/
          tags: test
          push: false
          build-args: |
           image=ubuntu:latest
           update=TRUE
           shell=bash

  job-run:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: packages
      - uses: ./actions/instrument/job
        with:
          cache: 'false'
        env:
          OTEL_SHELL_CONFIG_GITHUB_INJECT_ON_MAIN: 'TRUE'
          OTEL_SHELL_SDK_OUTPUT_REDIRECT: /dev/null
      - run: sudo apt-get update # check if command fails
      - run: | # check if install succeeded
          type otel.sh && type strace
      - run: | # check if instrumentation happened
          [ "$(alias | grep '_otel_observe' | wc -l)" -gt 0 ]
      - run: | # check if traceparent is injected
          [ -n "$TRACEPARENT" ]

  job-composite:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: packages
      - uses: ./actions/instrument/job
        with:
          cache: 'false'
        env:
          OTEL_SHELL_CONFIG_GITHUB_INJECT_ON_MAIN: 'TRUE'
          OTEL_SHELL_SDK_OUTPUT_REDIRECT: /dev/null
      - uses: plengauer/autorerun@v0.20.0
        with:
          github_token: ${{ github.token }}

  job-integration:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: packages
      - uses: ./actions/instrument/job
        with:
          cache: 'false'
        env:
          OTEL_SHELL_CONFIG_GITHUB_INJECT_ON_MAIN: 'TRUE'
          OTEL_SHELL_SDK_OUTPUT_REDIRECT: /dev/null
      - uses: renovatebot/github-action@v41.0.16 # node action with call to docker, docker flags that make injection more complicated, then call a node script via exec that already is injected with otel
        env:
          RENOVATE_DRY_RUN: full
          RENOVATE_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RENOVATE_REPOSITORIES: ${{ github.repository }}
          LOG_LEVEL: debug

  job-io-1:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    outputs:
      foo: ${{ steps.my-step.outputs.foo }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: packages
      - uses: ./actions/instrument/job
        env:
          OTEL_SHELL_CONFIG_GITHUB_INJECT_ON_MAIN: 'TRUE'
          OTEL_SHELL_SDK_OUTPUT_REDIRECT: /dev/null
      - run: echo foo=bar >> "$GITHUB_OUTPUT"
        id: my-step
      - run: |
          [ ${{ steps.my-step.outputs.foo }} = bar ]

  job-io-2:
    needs: job-io-1
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: packages
      - uses: ./actions/instrument/job
        env:
          OTEL_SHELL_CONFIG_GITHUB_INJECT_ON_MAIN: 'TRUE'
          OTEL_SHELL_SDK_OUTPUT_REDIRECT: /dev/null
      - run: |
          [ ${{ needs.job-io-1.outputs.foo }} = bar ]

  job-cache:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    strategy:
      matrix:
        cache: ['false', 'true']
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: packages
      - uses: ./actions/instrument/job
        with:
          cache: ${{ matrix.cache }}
        env:
          OTEL_SHELL_CONFIG_GITHUB_INJECT_ON_MAIN: 'TRUE'
          OTEL_SHELL_SDK_OUTPUT_REDIRECT: /dev/null
      - run: echo hello world

  job-exporter-local:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: packages
      - run: |
          nohup node -e "require('http').createServer(function (req, res) { console.log(req.method, req.url); res.writeHead(200); res.end(); }).listen(8080);" > /tmp/http.log &
      - uses: ./actions/instrument/job
        with:
          cache: 'false'
          collector: auto
          secrets_to_redact: '{"github.token": "${{ github.token }}", "url": "https://example.com/foo/bar", "regex": "[a-zA-Z]*"}'
        env:
          OTEL_LOGS_EXPORTER: otlp
          OTEL_METRICS_EXPORTER: otlp
          OTEL_TRACES_EXPORTER: otlp
          OTEL_EXPORTER_OTLP_LOGS_ENDPOINT: http://localhost:8080/v1/logs
          OTEL_EXPORTER_OTLP_METRICS_ENDPOINT: http://localhost:8080/v1/metrics
          OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: http://localhost:8080/v1/traces
          OTEL_SHELL_CONFIG_GITHUB_INJECT_ON_MAIN: 'TRUE'
          OTEL_SHELL_SDK_OUTPUT_REDIRECT: /dev/null
      - run: echo hello world >&2
      - run: sleep 60
      - run: cat /tmp/http.log | sort -u
      - run: cat /tmp/http.log | grep -q '^POST /v1/logs$'
      - run: cat /tmp/http.log | grep -q '^POST /v1/metrics$'
      - run: cat /tmp/http.log | grep -q '^POST /v1/traces$'

  job-exporter-global:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    strategy:
      matrix:
        collector: ['false', 'true', 'auto']
        exporter_logs: ['otlp', 'console']
        exporter_metrics: ['otlp', 'console']
        exporter_traces: ['otlp', 'console']
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: packages
      - run: |
          nohup node -e "require('http').createServer(function (req, res) { console.log(req.method, req.url); res.writeHead(200); res.end(); }).listen(8080);" > /tmp/http.log &
      - uses: ./actions/instrument/job
        with:
          cache: 'false'
          collector: ${{ matrix.collector }}
          secrets_to_redact: '{"github.token": "${{ github.token }}", "url": "https://example.com/foo/bar", "regex": "[a-zA-Z]*"}'
        env:
          OTEL_LOGS_EXPORTER: ${{ matrix.exporter_logs }}
          OTEL_METRICS_EXPORTER: ${{ matrix.exporter_metrics }}
          OTEL_TRACES_EXPORTER: ${{ matrix.exporter_traces }}
          OTEL_EXPORTER_OTLP_ENDPOINT: http://localhost:8080
          OTEL_SHELL_CONFIG_GITHUB_INJECT_ON_MAIN: 'TRUE'
          OTEL_SHELL_SDK_OUTPUT_REDIRECT: /dev/null
      - run: echo hello world >&2
      - run: sleep 60
      - run: cat /tmp/http.log | sort -u
      - run: cat /tmp/http.log | grep -q '^POST /v1/logs$'
        if: ${{ matrix.exporter_logs == 'otlp' }}
      - run: cat /tmp/http.log | grep -q '^POST /v1/metrics$'
        if: ${{ matrix.exporter_metrics == 'otlp' }}
      - run: cat /tmp/http.log | grep -q '^POST /v1/traces$'
        if: ${{ matrix.exporter_traces == 'otlp' }}

  workflow:
    runs-on: ubuntu-latest
    timeout-minutes: 180
    steps:
      - id: filename
        run: echo "otlp=$(mktemp)" >> "$GITHUB_OUTPUT"
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: packages
      - id: workflow_run
        run: |
          . ./actions/instrument/shared/github.sh
          INPUT_GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }} gh_workflow_runs | jq -r '.workflow_runs[] | select(.status == "completed") | select(.conclusion == "success") | select(.name == "Workflow Example") | [ .id, .run_attempt ] | @tsv' | sed 's/\t/ /g' | head -n 1 | while read -r id run_attempt; do
            echo "id=$id" >> "$GITHUB_OUTPUT"
            echo "run_attempt=$run_attempt" >> "$GITHUB_OUTPUT"
          done
      - run: |
          [ -n "${{ steps.workflow_run.outputs.id }}" ]
          [ -n "${{ steps.workflow_run.outputs.run_attempt }}" ]
      - uses: ./actions/instrument/workflow
        with:
          debug: 1
          workflow_run_id: ${{ steps.workflow_run.outputs.id }}
          workflow_run_attempt: ${{ steps.workflow_run.outputs.run_attempt }}
          cache: false
        env:
          OTEL_METRICS_EXPORTER: console
          OTEL_LOGS_EXPORTER: console
          OTEL_TRACES_EXPORTER: console
          OTEL_SHELL_SDK_OUTPUT_REDIRECT: '${{ steps.filename.outputs.otlp }}'
      - run: |
          . ./actions/instrument/shared/github.sh
          INPUT_GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }} gh_artifact_download '${{ steps.workflow_run.outputs.id }}' '${{ steps.workflow_run.outputs.run_attempt }}' 'opentelemetry_workflow_run_${{ steps.workflow_run.outputs.run_attempt }}' .
      - env:
          OTLP_JSON: '${{ steps.filename.outputs.otlp }}'
        run: |
          [ "$(cat "$OTLP_JSON" | jq -r .context.trace_id | grep -v '^null$' | sort -u | cut -d x -f 2 | tee /dev/stderr)" = "$(cat traceparent | cut -d - -f 2 | tee /dev/stderr)" ]
          cat "$OTLP_JSON" | jq -r .name | grep -v '^null$' | sort -u | grep 'test (foo)'
          cat "$OTLP_JSON" | jq -r .name | grep -v '^null$' | sort -u | grep 'test (bar)'
          cat "$OTLP_JSON" | jq -r .name | grep -v '^null$' | sort -u | grep 'test (baz)'
          cat "$OTLP_JSON" | jq -r .name | grep -v '^null$' | sort -u | grep 'publish'
          cat "$OTLP_JSON" | jq -r .name | grep -v '^null$' | sort -u | grep 'Set up job'
          cat "$OTLP_JSON" | jq -r .name | grep -v '^null$' | sort -u | grep 'Complete job'
          cat "$OTLP_JSON" | jq -r .body | grep -v '^null$' | sort -u | grep 'Cleaning up orphan processes'
