name: Test

on:
  workflow_call:

jobs:
  _build:
    uses: ./.github/workflows/build.yaml

  package:
    needs: _build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: package.deb
      - run: sudo apt-get -y install ./package.deb
      - run: sudo apt-get -y remove opentelemetry-shell

  smoke:
    needs: _build
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: package.deb
      - run: sudo apt-get -y install ./package.deb
      - run: bash -c "cd tests && sudo bash run_tests.sh bash"

  os-shell:
    needs: smoke
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: ['debian:oldstable', 'debian:stable', 'debian:testing', 'debian:unstable', 'ubuntu:focal', 'ubuntu:latest', 'ubuntu:rolling', 'ubuntu:devel']
        shell: [sh, ash, dash, bash]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: package.deb
      - run: mv ./package.deb tests
      - run: sudo apt-get update
      - run: sudo apt-get remove -y containerd.io
      - run: sudo apt-get install -y docker.io runc
      - run: bash -c "cd tests && bash run_tests_containerized.sh $OS $SHELL"
        env:
          OS: ${{ matrix.os }}
          SHELL: ${{ matrix.shell }}

  action:
    needs: _build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./actions/instrument/job
        env:
          OTEL_METRICS_EXPORTER: console
          OTEL_LOGS_EXPORTER: console
          OTEL_TRACES_EXPORTER: console
      - run: alias
      - run: |
          [ "$(alias | grep '_otel_observe' | wc -l)" -gt 0 ]
      - run: |
          [ -n "$OTEL_TRACEPARENT" ]

  performance-prepare:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.dynamic-matrix.outputs.matrix }}
    steps:
      - run: |
          { echo local; curl --no-progress-meter --fail --retry 16 --retry-all-errors https://api.github.com/repos/"$GITHUB_REPOSITORY"/releases | jq -r .[].tag_name; } | jq -nR '{"include": [inputs | select(length > 0) | {tag_name: .}]}' | tr -d '\n' | xargs -0 -I {} echo 'matrix={}' >> "$GITHUB_OUTPUT"
        id: dynamic-matrix
  
  performance:
    needs: [performance-prepare, smoke]
    runs-on: ubuntu-latest
    strategy: 
      matrix: ${{ fromJSON(needs.performance-prepare.outputs.matrix) }}
    steps:
      - if: matrix.tag_name == 'local'
        uses: actions/download-artifact@v4
        with:
          name: package.deb
      - if: matrix.tag_name != 'local'
        run: curl --no-progress-meter --fail --retry 16 --retry-all-errors https://api.github.com/repos/"$GITHUB_REPOSITORY"/releases | jq -r '.[] | select(.tag_name == "${{ matrix.tag_name }}") | .assets[].browser_download_url' | grep '.deb$' | xargs wget
      - run: sudo apt-get install -y ./*.deb
      - run: |
          export OTEL_SHELL_SDK_OUTPUT_REDIRECT=/dev/null
          command time -f '%U' bash -c '. /usr/bin/opentelemetry_shell.sh' 2>> performance.${{ matrix.tag_name }}.coldstart.list
          for i in seq 1 10; do command time -f '%U' bash -c '. /usr/bin/opentelemetry_shell.sh' 2>> performance.${{ matrix.tag_name }}.warmstart.list; done
      - uses: actions/upload-artifact@v4
        with:
          name: performance.${{ matrix.tag_name }}.coldstart.list
          path: performance.${{ matrix.tag_name }}.coldstart.list
          retention-days: 1
      - uses: actions/upload-artifact@v4
        with:
          name: performance.${{ matrix.tag_name }}.warmstart.list
          path: performance.${{ matrix.tag_name }}.warmstart.list
          retention-days: 1

  all:
    needs: [package, os-shell, action, performance]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: 'performance.*.list'
          merge-multiple: true
      - run: |
          for file in performance.*.list; do
            type=$(echo $file | rev | cut -d . -f 2 | rev)
            version=$(echo $file | cut -d . -f 2- | rev | cut -d . -f 3- | rev)
            cat "$file" | grep -v 'No such file or directory' | while IFS= read -r line; do
              echo "$type $version $line" >> data.list
            done
          done
      - run: cat data.list
#      - run: |
#          sudo apt-get install -y gnuplot-nox
#          echo '
#            set terminal png size 800,600
#            set output 'performance.png'
#            set title "Performance by Version"
#            set xlabel "Version"
#            set ylabel "Performance"
#            set grid
#            set style fill solid 0.5
#            set boxwidth 0.3 relative
#            set style data boxplot
#            set xtics rotate by -45
#            plot \
#              'data.list' using (strcol(1) == "warmstart" ? strcol(2) : 0):(strcol(1) == "warmstart" ? strcol(3) : 0) notitle with boxplot lc rgb "red", \
#              'data.list' using (strcol(1) == "coldstart" ? strcol(2) : 0):(strcol(1) == "coldstart" ? strcol(3) : 0) notitle with boxplot lc rgb "blue"
#          ' > plot.gp
#          gnuplot plot.gp
#      - uses: actions/upload-artifact@v4
#        with:
#          name: performance
#          path: performance.png
#          retention-days: 90
