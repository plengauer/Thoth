name: Test
on:
  push:
    branches:
      - '**'
  schedule:
    - cron: "0 0 * * *"
  workflow_call:
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
  verify-python-dependency:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: read
    steps:
      - uses: plengauer/opentelemetry-github/actions/instrument/job@v5.20.0
        with:
          secrets_to_redact: '["${{ github.token }}"]'
        env:
          OTEL_EXPORTER_OTLP_ENDPOINT: '${{ secrets.OTEL_EXPORTER_OTLP_ENDPOINT }}'
          OTEL_EXPORTER_OTLP_HEADERS: '${{ secrets.OTEL_EXPORTER_OTLP_HEADERS }}'
      - uses: actions/checkout@v4.2.2
      - run: |
          python3 -m venv venv
          . venv/bin/activate
          pip3 install -r src/opt/opentelemetry_shell/requirements.txt
          deactivate
          min_version_otel="$(cat venv/lib/python*/site-packages/opentelemetry_api-*.dist-info/METADATA | grep '^Requires-Python: ' | cut -d ' ' -f 2 | cut -d . -f 2-)"
          min_version_otel="${min_version_otel:-9}"
          min_version_shell="$(cat src/DEBIAN/control | grep '^Pre-Depends:' | tr ',' '\n' | grep -F -- 'python3 (>=' | cut -d '(' -f 2- | cut -d ')' -f 1 | cut -d ' ' -f 2 | cut -d . -f 2)"
          [ "$min_version_shell" -ge "$min_version_otel" ]
  verify-debian-dependencies:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: read
    steps:
      - uses: plengauer/opentelemetry-github/actions/instrument/job@v5.20.0
        env:
          OTEL_EXPORTER_OTLP_ENDPOINT: '${{ secrets.OTEL_EXPORTER_OTLP_ENDPOINT }}'
          OTEL_EXPORTER_OTLP_HEADERS: '${{ secrets.OTEL_EXPORTER_OTLP_HEADERS }}'
        with:
          secrets_to_redact: '["${{ github.token }}"]'
      - uses: actions/checkout@v4.2.2
      - run: sudo apt-get update && sudo apt-get -y install apt-file
      - run: sudo apt-file update
      - run: |
          process_packages() { sed 's/^awk$/gawk/g' | sed 's/^python3$/python3-minimal/g'; }
          process_commands() { sed 's/^awk$/gawk/g' | grep -vE '^which$' | grep -vE '^print$' | grep -vE '^rpm$';  }
          patternify() { grep -v '^$' | grep -P '^[a-zA-Z0-9/_.-]+$' | while read -r pattern; do echo '^'"$pattern"'$'; done }
          verify() {
            local dependencies="$(cat src/DEBIAN/control | grep -E "$1" | cut -d : -f 2- | tr '|' ',' | tr ',' '\n' | cut -d '(' -f 1 | tr -d ' ' | process_packages | patternify)"
            cat | while read -r file; do echo "Verifying $file" >&2; echo "$file"; done | xargs cat \
              | grep -v 'SKIP_DEPENDENCY_CHECK' | while read -r line; do line="${line%%#*}"; printf '%s\n' "$line"; done \
              | grep -oP '(^[[:space:]]*|\$\()\\?[a-zA-Z/][a-zA-Z0-9/_.-]*($|[[:space:]])' \
              | while read -r command; do command="${command% }"; command="${command# }"; command="${command#\$\(}"; command="${command#\\}"; [ "${#command}" -gt 1 ] && printf '%s\n' "$command" || true; done \
              | grep -vE '^_otel|^otel_|^OTEL_' | grep -vE "$(compgen -b | patternify)" | grep -vE "$(compgen -k | patternify)" | process_commands \
              | sort -u | while read -r command; do
                printf '%s' "$command ... "
                apt-file search /"$command" | grep -E "/$command\$" | grep -E ': /bin/|: /sbin/|: /usr/bin/|: /usr/sbin/|: /usr/local/bin/|: /usr/local/sbin/' | cut -d : -f 1 | grep -q "$dependencies" && echo OK || echo UNAVAILABLE
              done | tee /dev/stderr | grep -q 'UNAVAILABLE' && return 1 || return 0
          }
          find src/DEBIAN | grep -vE '^src/DEBIAN$|^src/DEBIAN/control$|^src/DEBIAN/triggers$' | verify '^Pre-Depends:' && find src -iname '*.sh' | grep -vE '^src/DEBIAN/' | verify '^Pre-Depends:|^Depends:|^Recommends:|^Suggests:'
  build-httpheader:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        architecture: [ 'x86_64', 'arm64' ]
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
      - run: mkdir -p src/usr/share/opentelemetry_shell/bin/${{ matrix.architecture }}
      - run: gcc -shared -fPIC -o src/usr/share/opentelemetry_shell/bin/${{ matrix.architecture }}/libinjecthttpheader.so src/usr/share/opentelemetry_shell/agent.injection.http_header.c -ldl
      - uses: actions/upload-artifact@v4
        with:
          name: bin_${{ matrix.architecture }}
          path: src/usr/share/opentelemetry_shell/bin/${{ matrix.architecture }}
  list-node-versions:
    runs-on: ubuntu-latest
    outputs:
      versions: ${{ steps.dynamic.outputs.versions }}
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
      - run: cd src/usr/share/opentelemetry_shell/agent.instrumentation.node && npm install
      - id: dynamic
        run: |
          seq "$(cat src/usr/share/opentelemetry_shell/agent.instrumentation.node/node_modules/@opentelemetry/*/package.json | jq -r .engines.node | grep -v null | cut -d ' ' -f 1 | tr -d ^ | cut -d = -f 2 | cut -d . -f 1 | sort -n -u | tail -n 1)" "$(cat src/usr/share/opentelemetry_shell/agent.instrumentation.node/Dockerfile | grep '^FROM ' | cut -d ' ' -f 2 | cut -d : -f 2)" \
            | jq -s -c | xargs -0 -I {} echo 'versions={}' | tee /dev/stderr >> "$GITHUB_OUTPUT"
  build-node-modules:
    needs: list-node-versions
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version: ${{ fromJSON(needs.list-node-versions.outputs.versions) }}
      fail-fast: false
    permissions:
      contents: read
    steps:
      - uses: actions/setup-node@v4.4.0
        with:
          node-version: ${{ matrix.version }}
      - uses: actions/checkout@v4
      - run: |
          cd src/usr/share/opentelemetry_shell/agent.instrumentation.node
          npm install
          npm prune
      - uses: actions/upload-artifact@v4
        with:
          name: node_modules_${{ matrix.version }}
          path: src/usr/share/opentelemetry_shell/agent.instrumentation.node/node_modules
  merge-node-modules:
    needs: build-node-modules
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: node_modules_*
      - run: |
          ls | grep '^node_modules_' | while read -r directory_name; do echo "${directory_name#node_modules_}"; done | while read -r version; do
            mkdir "$version"
            mv node_modules_"$version" "$version"/node_modules
          done
      - run: echo hello world # TODO flatten
      - run: zip -r9 node_modules.zip *
      - uses: actions/upload-artifact@v4
        with:
          name: node_modules
          path: node_modules.zip
  list-python-versions:
    runs-on: ubuntu-latest
    outputs:
      versions: ${{ steps.dynamic.outputs.versions }}
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
      - run: python3 -m venv venv && . venv/bin/activate && pip3 install -r src/usr/share/opentelemetry_shell/agent.instrumentation.python/requirements.txt
      - id: dynamic
        run: |
          seq "$(cat venv/lib/python*/site-packages/opentelemetry_*.dist-info/METADATA | grep '^Requires-Python: >=' | cut -d . -f 2 | sort -n -u | tail -n 1)" "$(cat src/usr/share/opentelemetry_shell/agent.instrumentation.python/Dockerfile | grep '^FROM ' | cut -d ' ' -f 2 | cut -d : -f 2 | cut -d . -f 2)" \
            | while read -r version; do echo '"'3."$version"'"'; done | jq -s -c | xargs -0 -I {} echo 'versions={}' | tee /dev/stderr >> "$GITHUB_OUTPUT"
  build-python-site-packages:
    needs: list-python-versions
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version: ${{ fromJSON(needs.list-python-versions.outputs.versions) }}
      fail-fast: false
    permissions:
      contents: read
    steps:
      - uses: actions/setup-python@v4.4.0
        with:
          python-version: ${{ matrix.version }}
      - uses: actions/checkout@v4
      - run: |
          cd src/usr/share/opentelemetry_shell/agent.instrumentation.python
          python3 -m venv venv
          . venv/bin/activate
          pip3 install -r requirements.txt
          printf '%s' '
          from opentelemetry.instrumentation.bootstrap_gen import (default_instrumentations, libraries)
          print(*default_instrumentations, sep="\n")
          print(*map(lambda element: element["instrumentation"], libraries), sep="\n")
          ' | python3 | grep "==$(pip3 show opentelemetry-distro | grep Version | cut -d ':' -f 2- | tr -d ' ')"'$' | grep -v opentelemetry-instrumentation-system-metrics | xargs pip3 install
          pip3 check
          deactivate
      - uses: actions/upload-artifact@v4
        with:
          name: python_site_packages_${{ matrix.version }}
          path: src/usr/share/opentelemetry_shell/agent.instrumentation.python/venv/lib/python${{ matrix.version }}/site-packages
  merge-python-site-packages:
    needs: build-node-modules
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: python_site_packages_*
      - run: |
          ls | grep '^python_site_packages' | while read -r directory_name; do echo "${directory_name#python_site_packages_}"; done | while read -r version; do
            mkdir "$version"
            mv python_site_packages_"$version" "$version"/site-packages
          done
      - run: echo hello world # TODO flatten
      - run: zip -r9 python_site_packages.zip *
      - uses: actions/upload-artifact@v4
        with:
          name: python_site_packages
          path: python_site_packages.zip
  build-java-agents:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-java@v4.7.1
        with:
          java-version: 8 # TODO make this dynamic based on minimum
          distribution: adopt
      - uses: actions/checkout@v4
      - run: |
          cd src/usr/share/opentelemetry_shell/agent.instrumentation.java
          groupId="$(cat pom.xml | grep groupId | cut -d '>' -f 2- | cut -d '<' -f 1)"
          artifactId="$(cat pom.xml | grep artifactId | cut -d '>' -f 2- | cut -d '<' -f 1)"
          version="$(cat pom.xml | grep version | cut -d '>' -f 2- | cut -d '<' -f 1)"
          wget https://repo1.maven.org/maven2/"$(echo "$groupId" | tr '.' '/')"/"$artifactId"/"$version"/"$artifactId"-"$version".jar -O opentelemetry-javaagent.jar
      - run: |
          cd src/usr/share/opentelemetry_shell/agent.instrumentation.java
          javac -classpath ./opentelemetry-javaagent.jar RootContextAgent.java
          jar cmf manifest.txt rootcontextagent.jar RootContextAgent.class
      - uses: actions/upload-artifact@v4
        with:
          name: java
          path: src/usr/share/opentelemetry_shell/agent.instrumentation.java/*.jar
  build:
    needs: [verify-python-dependency, verify-debian-dependencies, build-httpheader, merge-node-modules, merge-python-site-packages, build-java-agents]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: read
    steps:
      - uses: plengauer/opentelemetry-github/actions/instrument/job@v5.20.0
        with:
          secrets_to_redact: '["${{ github.token }}"]'
        env:
          OTEL_EXPORTER_OTLP_ENDPOINT: '${{ secrets.OTEL_EXPORTER_OTLP_ENDPOINT }}'
          OTEL_EXPORTER_OTLP_HEADERS: '${{ secrets.OTEL_EXPORTER_OTLP_HEADERS }}'
      - run: sudo apt-get update && sudo apt-get install devscripts debhelper alien
      - uses: actions/checkout@v4.2.2
      - run: |
          {
            find src -iname 'Dockerfile' -type f
            find src -iname '*.c' -type f
            find src -iname '*.java' -type f
            find src -iname 'manifest.txt' -type f
            find src -iname 'pom.xml' -type f
          } | xargs -r rm
      - run: mkdir -p src/usr/share/opentelemetry_shell/bin
      - uses: actions/download-artifact@v4
        with:
          pattern: bin_*
          path: src/usr/share/opentelemetry_shell/
      - run: |
          ls src/usr/share/opentelemetry_shell/ | grep '^bin_' | while read -r directory_name; do echo "${directory_name#bin_}"; done | while read -r architecture; do
            mkdir -p src/usr/share/opentelemetry_shell/bin/"$architecture"
            mv src/usr/share/opentelemetry_shell/bin_"$architecture"/* src/usr/share/opentelemetry_shell/bin/"$architecture"/
            rm -rf src/usr/share/opentelemetry_shell/bin_"$architecture"
          done
      - uses: actions/download-artifact@v4
        with:
          pattern: node_modules
          path: src/usr/share/opentelemetry_shell/agent.instrumentation.node
      - run: mv src/usr/share/opentelemetry_shell/agent.instrumentation.node/node_modules/* src/usr/share/opentelemetry_shell/agent.instrumentation.node && rm -rf src/usr/share/opentelemetry_shell/agent.instrumentation.node/node_modules
      - uses: actions/download-artifact@v4
        with:
          pattern: python_site_packages
          path: src/usr/share/opentelemetry_shell/agent.instrumentation.python
      - run: mv src/usr/share/opentelemetry_shell/agent.instrumentation.python/python_site_packages/* src/usr/share/opentelemetry_shell/agent.instrumentation.python && rm -rf src/usr/share/opentelemetry_shell/agent.instrumentation.python/python_site_packages
      - uses: actions/download-artifact@v4
        with:
          name: java
          path: src/usr/share/opentelemetry_shell/agent.instrumentation.java
      - run: sed -i "s/__VERSION__/$(cat VERSION)/g" src/DEBIAN/control
      - run: cd src && dpkg-deb --root-owner-group -Zgzip --build . ../package.deb
      - run: |
          cd src
          alien --to-rpm --scripts --keep-version --generate ../package.deb
          rpm_dir=$(echo */*.spec | rev | cut -d / -f 2- | rev)
          {
            dependencies_format_deb_to_rpm() {
              tr '(' ' ' | tr -d ')' | sed 's/=/= /g' | sed 's/|/ or /g' | sed 's/.*/(&)/g'
            }

            dependencies_content_deb_to_rpm() {
              grep -v 'python3-venv' | sed 's/^awk$/gawk | mawk/g' | sed 's/^dpkg$/rpm/g' | sed 's/^xxd$/xxd | vim-common | vim/g'
            }

            echo -n 'Requires: ' && cat DEBIAN/control | grep -E '^Pre-Depends:|^Depends:|^Recommends:' | cut -d ' ' -f 2- | tr ',' '\n' | tr -d ' ' | grep -v '^$' | dependencies_content_deb_to_rpm | dependencies_format_deb_to_rpm | tr '\n' ' ' && echo
            echo "AutoReq: no"
            echo "BuildArch: noarch"
            cat "$rpm_dir"/*.spec | while read -r line; do
              case "$line" in
                '%post'*)
                  cat DEBIAN/triggers | grep -v '^$' | cut -d ' ' -f 2 | rev | cut -d / -f 1 | rev | sort -u | grep -v python3 | while read -r package; do
                    cat "$rpm_dir"/*.spec | sed -n '/^%post/,/^$/p' | sed 's/^%post/%triggerin -- '"$package"'/g'
                    cat "$rpm_dir"/*.spec | sed -n '/^%post/,/^$/p' | sed 's/^%post/%triggerun -- '"$package"'/g'
                  done
                  ;;
                *) ;;
              esac
              printf '%s\n' "$line"
            done
          } > rpm.spec && rm "$rpm_dir"/*.spec
          rpmbuild -bb --buildroot="$(cat rpm.spec | grep '^Buildroot: ' | cut -d ' ' -f 2)" rpm.spec
          mv ../*.rpm ../package.rpm
      - uses: actions/upload-artifact@v4.6.2
        with:
          name: packages
          path: package.*
  shell:
    needs: build
    permissions:
      actions: read
      contents: read
    uses: ./.github/workflows/test_shell.yaml
    secrets: inherit
  github:
    needs: build
    permissions:
      actions: read
      attestations: none
      checks: none
      contents: read
      deployments: none
      discussions: none
      id-token: none
      issues: none
      models: none
      packages: read
      pages: none
      pull-requests: none
      security-events: none
      statuses: none
    uses: ./.github/workflows/test_github.yaml
    secrets: inherit
  join:
    needs: [shell, github]
    runs-on: ubuntu-latest
    outputs:
      success: ${{ steps.tests.outputs.success }}
    permissions:
      contents: none
      actions: read
    steps:
      - id: tests
        run: echo "success=true" >> "$GITHUB_OUTPUT"
  all:
    if: ${{ always() }} # this is because we need this to fail and not skipped to avoid PRs getting merged without this passing
    needs: join
    runs-on: ubuntu-latest
    permissions:
      contents: none
      actions: read
    steps:
      - env:
          SUCCESS: ${{ needs.join.outputs.success }}
        run: |
          [ "$SUCCESS" = 'true' ]
