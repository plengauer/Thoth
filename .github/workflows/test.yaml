name: Test

on:
  workflow_call:

jobs:
  _build:
    uses: ./.github/workflows/build.yaml

  install:
    needs: _build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: package.deb
      - run: sudo apt-get -y install ./package.deb
      - run: sudo apt-get -y remove opentelemetry-shell

  upgrade:
    needs: install
    runs-on: ubuntu-latest
    steps:
      - run: curl --no-progress-meter --fail --retry 16 --retry-all-errors https://api.github.com/repos/"$GITHUB_REPOSITORY"/releases/latest | jq -r '.assets[].browser_download_url' | xargs wget
      - run: sudo apt-get -y install ./opentelemetry-shell_*.deb
      - uses: actions/download-artifact@v4
        with:
          name: package.deb
      - run: sudo apt-get -y install ./package.deb
      
  smoke:
    needs: install
    runs-on: ubuntu-latest
    timeout-minutes: 180
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: package.deb
      - run: sudo -E apt-get -y install ./package.deb
      - run: bash -c "cd tests && sudo -E bash run_tests.sh bash"

  os-shell:
    needs: smoke
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: ['debian:oldstable', 'debian:stable', 'debian:testing', 'debian:oldstable-slim', 'debian:stable-slim', 'debian:testing-slim', 'ubuntu:focal', 'ubuntu:latest', 'ubuntu:rolling']
        update: ['FALSE', 'TRUE']
        shell: [sh, dash, bash, busybox]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: package.deb
      - run: mv ./package.deb tests
      - run: sudo apt-get update
      - run: sudo apt-get remove -y containerd.io
      - run: sudo apt-get install -y docker.io runc
      - run: bash -c 'cd tests && bash run_tests_containerized.sh "$OS" "$UPDATE" "$SHELL"'
        env:
          OS: ${{ matrix.os }}
          UPDATE: ${{ matrix.update }}
          SHELL: ${{ matrix.shell }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  action:
    needs: smoke
    runs-on: ubuntu-latest
    steps:
      - run: printenv | grep '^GITHUB_'
      - uses: actions/download-artifact@v4
        with:
          name: package.deb
      - run: sudo -E apt-get install ./package.deb
      - uses: actions/checkout@v4
      - uses: ./actions/instrument/job
        env:
          OTEL_METRICS_EXPORTER: console
          OTEL_LOGS_EXPORTER: console
          OTEL_TRACES_EXPORTER: console
      - run: echo hello world # check if simple command fails
      - run: sudo apt-get update
      - run: | # check if instrumentation happened
          [ "$(alias | grep '_otel_observe' | wc -l)" -gt 0 ]
      - run: | # check if traceparent is injected
          [ -n "$TRACEPARENT" ]
      - uses: actions/download-artifact@v4 # check if node action works
        with:
          name: package.deb
      - uses: actions/hello-world-docker-action@main # check if docker action works
      - uses: actions/first-interaction@v1 # node action with - in env vars
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          issue-message: "Hello, thanks for adding an issue for the first time!"
          pr-message: "Hello, thanks for contributing for the first time!"
      - uses: renovatebot/github-action@v40.2.8 # integration, node action with call to docker, docker flags that make injection more complicated, then call a node script via exec that already is injected with otel
        env:
          RENOVATE_DRY_RUN: full
          RENOVATE_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RENOVATE_REPOSITORIES: ${{ github.repository }}
          LOG_LEVEL: debug
      - uses: docker/setup-qemu-action@v3 # some docker actions have otel built-in
      - uses: docker/setup-buildx-action@v3 # some docker actions have otel built-in
      - run: cp package.deb tests/package.deb
      - uses: docker/build-push-action@v6 # some docker actions have otel built-in
        with:
          context: ./tests/
          tags: test
          push: false
          build-args: |
           image=ubuntu:latest
           update=TRUE
           shell=bash

  performance-prepare:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.dynamic-matrix.outputs.matrix }}
    steps:
      - run: |
          { echo '~local'; curl --no-progress-meter --fail --retry 16 --retry-all-errors https://api.github.com/repos/"$GITHUB_REPOSITORY"/releases | jq -r .[].tag_name | head --lines=10; } | jq -nR '{"include": [inputs | select(length > 0) | {tag_name: .}]}' | tr -d '\n' | xargs -0 -I {} echo 'matrix={}' >> "$GITHUB_OUTPUT"
        id: dynamic-matrix
  
  performance:
    needs: [performance-prepare, smoke]
    runs-on: ubuntu-latest
    strategy: 
      matrix: ${{ fromJSON(needs.performance-prepare.outputs.matrix) }}
    steps:
      - if: matrix.tag_name == '~local'
        uses: actions/download-artifact@v4
        with:
          name: package.deb
      - if: matrix.tag_name != '~local'
        run: curl --no-progress-meter --fail --retry 16 --retry-all-errors https://api.github.com/repos/"$GITHUB_REPOSITORY"/releases | jq -r '.[] | select(.tag_name == "${{ matrix.tag_name }}") | .assets[].browser_download_url' | grep '.deb$' | xargs wget
      - run: sudo apt-get install -y ./*.deb
      - run: |
          export OTEL_SHELL_SDK_OUTPUT_REDIRECT=/dev/null
          command time -f '%U' bash -c '. /usr/bin/opentelemetry_shell.sh' 2>> performance.${{ matrix.tag_name }}.coldstart.list
          for i in $(seq 1 100); do command time -f '%U' bash -c '. /usr/bin/opentelemetry_shell.sh' 2>> performance.${{ matrix.tag_name }}.warmstart.list; done
      - uses: actions/upload-artifact@v4
        with:
          name: performance.${{ matrix.tag_name }}.coldstart.list
          path: performance.${{ matrix.tag_name }}.coldstart.list
          retention-days: 1
      - uses: actions/upload-artifact@v4
        with:
          name: performance.${{ matrix.tag_name }}.warmstart.list
          path: performance.${{ matrix.tag_name }}.warmstart.list
          retention-days: 1

  join:
    needs: [install, upgrade, os-shell, action, performance]
    runs-on: ubuntu-latest
    outputs:
      success: ${{ steps.tests.outputs.success }}
    steps:
      - id: tests
        run: echo "success=true" >> "$GITHUB_OUTPUT"

  all:
    if: ${{ always() }}
    needs: [join]
    runs-on: ubuntu-latest
    steps:
      - env:
          SUCCESS: ${{ needs.join.outputs.success }}
        run: |
          [ "$SUCCESS" = 'true' ]
      - uses: actions/download-artifact@v4
        with:
          pattern: 'performance.*.list'
          merge-multiple: true
      - run: |
          for file in performance.*.list; do
            type=$(echo $file | rev | cut -d . -f 2 | rev)
            version=$(echo $file | cut -d . -f 2- | rev | cut -d . -f 3- | rev)
            cat "$file" | grep -v 'No such file or directory' | sort -n | head -n 1 | xargs echo "$version" >> "$type".list
          done
      - run: |
          sudo apt-get update && sudo apt-get install -y gnuplot-nox
          echo '
            set terminal pngcairo enhanced font "Verdana,10" size 1024,1024
            set output "performance.png"
            set title "Performance Comparison"
            set xlabel "Version"
            set xtics rotate by -45
            set ylabel "Performance"
            set logscale y 10
            plot "coldstart.list" using 0:2:xticlabels(1) with linespoints title "Cold Start" lt rgb "blue", "warmstart.list" using 0:2:xticlabels(1) with linespoints title "Warm Start" lt rgb "red"
          ' > plot.gp
          gnuplot plot.gp
      - uses: actions/upload-artifact@v4
        with:
          name: performance.png
          path: performance.png
          retention-days: 90

  demo-prepare:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.demos.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
      - run: |
          cd demos && echo */ | tr ' ' '\n' | tr -d / | jq -nR '{"include": [inputs | select(length > 0) | {demo_directory: .}]}' | tr -d '\n' | xargs -0 -I {} echo 'matrix={}' >> "$GITHUB_OUTPUT"
        id: demos

  demo-generate:
    needs: [ demo-prepare, install ]
    runs-on: ubuntu-latest
    strategy: 
      matrix: ${{ fromJSON(needs.demo-prepare.outputs.matrix) }}
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: package.deb
      - run: sudo apt-get update && sudo apt-get install -y ./package.deb && rm ./package.deb
      - uses: actions/checkout@v4
      - id: demo
        run: |
          set +o pipefail
          cd demos/${{ matrix.demo_directory }}
          export OTEL_METRICS_EXPORTER=console
          export OTEL_LOGS_EXPORTER=console
          export OTEL_TRACES_EXPORTER=console
          export OTEL_SHELL_SDK_OUTPUT_REDIRECT="$(mktemp -u)"
          otlp="$(mktemp)"
          stdout="$(mktemp)"
          stderr="$(mktemp)"
          mkfifo "$OTEL_SHELL_SDK_OUTPUT_REDIRECT"
          while true; do cat "$OTEL_SHELL_SDK_OUTPUT_REDIRECT" >> "$otlp"; done &
          pid="$!"
          cat meta.json | jq -r .setup | (grep -v '^null$' || true) | sh
          bash -e demo.sh 1> "$stdout" 2> "$stderr" || true
          kill -9 "$pid"
          wait
          sleep 10
          echo "STDOUT=$stdout" >> "$GITHUB_OUTPUT"
          echo "STDERR=$stderr" >> "$GITHUB_OUTPUT"
          echo "OTLP=$otlp" >> "$GITHUB_OUTPUT"
      - env:
          STDOUT: ${{ steps.demo.outputs.STDOUT }}
          STDERR: ${{ steps.demo.outputs.STDERR }}
          OTLP: ${{ steps.demo.outputs.OTLP }}
          GITHUB_TOKEN: ${{ secrets.ACTIONS_GITHUB_TOKEN }}
        run: |
          set +o pipefail
          cd demos/${{ matrix.demo_directory }}

          convert_span_id_to_name() {
            cat "$OTLP" | jq -r '. | select(.context.span_id == "'"$1"'") | .name'
          }

          get_root_span_id() {
            cat "$OTLP" | jq -r '. | select(.name != null) | select(.parent_id == null) | .context.span_id'
          }

          get_child_span_ids() {
            cat "$OTLP" | jq -r '. | select(.name != null) | select(.parent_id == "'"$1"'") | .context.span_id'
          }

          print_span_name_tree() {
            local span_id="$1"
            local indent="$2"
            printf '%s' "$indent"; convert_span_id_to_name "$span_id"
            get_child_span_ids "$span_id" | while read -r child_span_id; do
              print_span_name_tree "$child_span_id" "$indent  "
            done
          }

          {
            echo '# Demo "'"$(cat ./meta.json | jq -r .title)"'"'
            cat meta.json | jq -r .description
            echo '## Script'
            echo '```sh'
            cat demo.sh
            echo '```'
            echo '## Standard Out'
            echo '```'
            cat "$STDOUT"
            echo '```'
            echo '## Standard Error'
            echo '```'
            cat "$STDERR"
            echo '```'
            echo '## Trace Overview'
            echo '```'
            print_span_name_tree "$(get_root_span_id)" ""
            echo '```'
            echo '## Full OTLP Data'
            echo '```json'
            cat "$OTLP" | jq .
            echo '```'
          } > README.md
      - run: cat demos/${{ matrix.demo_directory }}/README.md
      - run: |
          cd demos/${{ matrix.demo_directory }}
          git add --intent-to-add README.md
          git diff
          git diff | grep -v '^+++' | grep -v '^---' | grep -v _id | grep -v .id | grep -v _time | grep -v timestamp | grep -v github. | grep -v telemetry.sdk.version | grep -v process.pid | grep -v process.parent_pid | grep -q '^+' && echo dirty=false >> "$GITHUB_OUTPUT" || true
        id: diff
      - name: "Resolve Reviewers"
        if: steps.diff.outputs.dirty
        id: reviewers
        run: |
          if ! [ -f .github/renovate.json ]; then exit 0; fi
          echo "reviewers=$(cat .github/renovate.json | jq -r '.reviewers | join(",")')" >> "$GITHUB_OUTPUT"
      - name: "Open Pull Request"
        if: steps.diff.outputs.dirty
        id: open-pr
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.ACTIONS_GITHUB_TOKEN }}
          commit-message: "Update demo"
          branch: "demos/${{ matrix.demo_directory }}"
          title: "Update Demo ${{ matrix.demo_directory }}"
          body: |
            (this PR is automatically generated)
          reviewers: ${{ steps.reviewers.outputs.reviewers }}
          delete-branch: true
      - uses: peter-evans/enable-pull-request-automerge@v3
        if: steps.open-pr.outputs.pull-request-number != null
        with:
          token: ${{ secrets.ACTIONS_GITHUB_TOKEN }}
          pull-request-number: ${{ steps.open-pr.outputs.pull-request-number }}
          merge-method: squash
