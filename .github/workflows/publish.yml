name: Publish
on:
  push:
    paths: VERSION
    branches:
      - main
      - 'release/v*.*'
jobs:
  test:
    permissions:
      actions: write
      attestations: none
      checks: none
      contents: read
      deployments: none
      discussions: none
      id-token: none
      issues: none
      models: none
      packages: read
      pages: none
      pull-requests: none
      security-events: none
      statuses: none
    secrets: inherit
    uses: ./.github/workflows/test.yml
  publish:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: write
      id-token: write
      attestations: write
    steps:
      - uses: plengauer/opentelemetry-github/actions/instrument/job@v5.30.1
        with:
          secrets_to_redact: '["${{ github.token }}","${{ secrets.ACTIONS_GITHUB_TOKEN }}"]'
        env:
          OTEL_EXPORTER_OTLP_ENDPOINT: '${{ secrets.OTEL_EXPORTER_OTLP_ENDPOINT }}'
          OTEL_EXPORTER_OTLP_HEADERS: '${{ secrets.OTEL_EXPORTER_OTLP_HEADERS }}'
      - uses: actions/checkout@v5.0.0
      - run: echo "version=$(cat VERSION)" >> "$GITHUB_OUTPUT"
        id: version
      - uses: actions/download-artifact@v6.0.0
        with:
          name: packages
      - uses: actions/attest-build-provenance@v3.0.0
        with:
          subject-path: ./package.deb
          subject-name: opentelemetry-shell_${{ steps.version.outputs.version }}.deb
      - uses: actions/attest-build-provenance@v3.0.0
        with:
          subject-path: ./package.rpm
          subject-name: opentelemetry-shell_${{ steps.version.outputs.version }}.rpm
      - uses: actions/attest-build-provenance@v3.0.0
        with:
          subject-path: ./package.apk
          subject-name: opentelemetry-shell_${{ steps.version.outputs.version }}.apk
      - uses: actions/download-artifact@v6.0.0
        with:
          name: images
      - run: |
          echo ${{ secrets.ACTIONS_GITHUB_TOKEN }} | sudo docker login ghcr.io -u "$(GH_TOKEN=${{ secrets.ACTIONS_GITHUB_TOKEN }} gh api user -q .login)" --password-stdin
          find . -iname '*.image' | while read -r image_file; do
            image_name="$image_file"
            image_name="${image_name#./}"
            image_name="${image_name%.image}"
            tag=ghcr.io/"${GITHUB_REPOSITORY%/*}"/"$image_name":v${{ steps.version.outputs.version }}
            sudo docker load < "$image_file"
            sudo docker image tag "$image_name" "$tag"
            sudo docker push "$tag"
          done
      - run: |
          gh release create "v${{ steps.version.outputs.version }}" \
            --title "Release v${{ steps.version.outputs.version }}" \
            --generate-notes \
            --draft
          echo "upload_url=$(gh api repos/${{ github.repository }}/releases | jq '.[] | select(.tag_name == "v${{ steps.version.outputs.version }}") | .upload_url' -r)" >> "$GITHUB_OUTPUT"
          echo "id=$(gh api repos/${{ github.repository }}/releases | jq '.[] | select(.tag_name == "v${{ steps.version.outputs.version }}") | .id' -r)" >> "$GITHUB_OUTPUT"
        id: create_release
        env:
          GH_TOKEN: ${{ secrets.ACTIONS_GITHUB_TOKEN }}
      - uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.ACTIONS_GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./package.deb
          asset_name: opentelemetry-shell_${{ steps.version.outputs.version }}.deb
          asset_content_type: application/octet-stream
      - uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.ACTIONS_GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./package.rpm
          asset_name: opentelemetry-shell_${{ steps.version.outputs.version }}.rpm
          asset_content_type: application/octet-stream
      - uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.ACTIONS_GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./package.apk
          asset_name: opentelemetry-shell_${{ steps.version.outputs.version }}.apk
          asset_content_type: application/octet-stream
      - uses: eregon/publish-release@v1.0.6
        env:
          GITHUB_TOKEN: ${{ secrets.ACTIONS_GITHUB_TOKEN }}
        with:
          release_id: ${{ steps.create_release.outputs.id }}
      - name: Extract version components
        id: version_parts
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Version '$VERSION' does not follow semantic versioning format (major.minor.patch)"
            exit 1
          fi
          MAJOR=$(echo "$VERSION" | cut -d. -f1)
          MINOR=$(echo "$VERSION" | cut -d. -f2)
          echo "major=$MAJOR" >> "$GITHUB_OUTPUT"
          echo "minor=$MINOR" >> "$GITHUB_OUTPUT"
          echo "major_minor=$MAJOR.$MINOR" >> "$GITHUB_OUTPUT"
      - name: Create and push major.minor version tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -f "v${{ steps.version_parts.outputs.major_minor }}"
          git push -f https://x-access-token:${{ secrets.ACTIONS_GITHUB_TOKEN }}@github.com/${{ github.repository }}.git "v${{ steps.version_parts.outputs.major_minor }}"
      - name: Create and push major version tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -f "v${{ steps.version_parts.outputs.major }}"
          git push -f https://x-access-token:${{ secrets.ACTIONS_GITHUB_TOKEN }}@github.com/${{ github.repository }}.git "v${{ steps.version_parts.outputs.major }}"
