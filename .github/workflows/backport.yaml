name: Backport
on:
  push:
    branches:
      - main
jobs:
  backport:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: read
      issues: read
      actions: read
    steps:
      - uses: plengauer/opentelemetry-github/actions/instrument/job@v5.30.1
        env:
          OTEL_EXPORTER_OTLP_ENDPOINT: ${{ secrets.OTEL_EXPORTER_OTLP_ENDPOINT }}
          OTEL_EXPORTER_OTLP_HEADERS: ${{ secrets.OTEL_EXPORTER_OTLP_HEADERS }}
        with:
          secrets_to_redact: '["${{ github.token }}","${{ secrets.ACTIONS_GITHUB_TOKEN }}","${{ secrets.OPENAI_TOKEN }}"]'
      - uses: actions/checkout@v5.0.0
        with:
          fetch-depth: 0
          token: ${{ secrets.ACTIONS_GITHUB_TOKEN }}

      - id: autoversion
        uses: plengauer/autoversion@v1.2.0
        with:
          github_token: ${{ secrets.ACTIONS_GITHUB_TOKEN }}
          openai_token: ${{ secrets.OPENAI_TOKEN }}
          path_include: ./src:./actions
          dry_run: true
          depth: 1
      
      - id: check_patch
        run: |
          set -e
          
          old_version=$(git show HEAD~1:VERSION 2>/dev/null || echo "0.0.0")
          new_version=$(cat VERSION)
          
          old_major=$(echo "$old_version" | cut -d. -f1)
          old_minor=$(echo "$old_version" | cut -d. -f2)
          new_major=$(echo "$new_version" | cut -d. -f1)
          new_minor=$(echo "$new_version" | cut -d. -f2)
          
          if [ "$old_major" = "$new_major" ] && [ "$old_minor" = "$new_minor" ] && [ "$old_version" != "$new_version" ]; then
            echo "should_backport=true" >> "$GITHUB_OUTPUT"
          else
            echo "should_backport=false" >> "$GITHUB_OUTPUT"
          fi
      
      - id: prepare_branch
        if: steps.check_patch.outputs.should_backport == 'true'
        env:
          GH_TOKEN: ${{ secrets.ACTIONS_GITHUB_TOKEN }}
        run: "set -e\n\ncurrent_version=$(cat VERSION)\nmajor=$(echo \"$current_version\" | cut -d. -f1)\nminor=$(echo \"$current_version\" | cut -d. -f2)\nbranch_name=\"release/v${major}.${minor}\"\necho name=\"$branch_name\" >> \"$GITHUB_OUTPUT\"\n\nif git ls-remote --exit-code --heads origin \"$branch_name\" >/dev/null 2>&1; then\n  git fetch origin \"$branch_name\"\n  git checkout \"$branch_name\"\nelse\n  initial_tag=\"v${major}.${minor}.0\"\n  \n  if git rev-parse \"$initial_tag\" >/dev/null 2>&1; then\n    git checkout -b \"$branch_name\" \"$initial_tag\"\n  else\n    last_tag=$(git tag -l \"v${major}.${minor}.*\" | sort -V | tail -1)\n    if [ -n \"$last_tag\" ]; then\n      git checkout -b \"$branch_name\" \"$last_tag\"\n    else\n      main_version=$(git show main:VERSION)\n      main_major=$(echo \"$main_version\" | cut -d. -f1)\n      main_minor=$(echo \"$main_version\" | cut -d. -f2)\n      \n      if [ \"$major\" = \"$main_major\" ] && [ \"$minor\" = \"$main_minor\" ]; then\n        git checkout -b \"$branch_name\" main\n      else\n        echo \"::error::Cannot create release branch - no tag found for v${major}.${minor}.* and not current version\"\n        exit 1\n      fi\n    fi\n  fi\n  \n  git push -u origin \"$branch_name\"\nfi\n"
      - if: steps.check_patch.outputs.should_backport == 'true'
        run: |
          set -e
          
          git format-patch -1 "${{ github.sha }}" --stdout > /tmp/commit.patch
          
          if grep -q "diff --git a/VERSION b/VERSION" /tmp/commit.patch; then
            if command -v filterdiff >/dev/null 2>&1; then
              filterdiff -x 'VERSION' /tmp/commit.patch > /tmp/commit_filtered.patch
              mv /tmp/commit_filtered.patch /tmp/commit.patch
            else
              awk '
                /^diff --git a\/VERSION b\/VERSION$/ { skip=1; next }
                /^diff --git / { skip=0 }
                !skip { print }
              ' /tmp/commit.patch > /tmp/commit_filtered.patch
              if [ -s /tmp/commit_filtered.patch ]; then
                mv /tmp/commit_filtered.patch /tmp/commit.patch
              fi
            fi
          fi
          
          if [ -s /tmp/commit.patch ] && git apply --check /tmp/commit.patch 2>/dev/null; then
            git apply /tmp/commit.patch
          elif [ -s /tmp/commit.patch ]; then
            original_version=$(cat VERSION)
            if git cherry-pick -n "${{ github.sha }}" 2>/dev/null; then
              echo "$original_version" > VERSION
              git add VERSION
            else
              git cherry-pick --abort 2>/dev/null || true
              echo "::error::Cherry-pick failed - conflicts need manual resolution for commit ${{ github.sha }}"
              exit 1
            fi
          else
            exit 0
          fi
      
      - id: prepare_pr
        env:
          GH_TOKEN: ${{ secrets.ACTIONS_GITHUB_TOKEN }}
        run: |
          set -e
          
          commit_title=$(git log -1 --pretty=%s "${{ github.sha }}")
          echo "commit_title=$commit_title" >> "$GITHUB_OUTPUT"
          
          pr_number=$(gh pr list --state merged --search "${{ github.sha }}" --json number --jq '.[0].number' 2>/dev/null)
          
          reviewers=""
          author=""
          
          if [ -n "$pr_number" ] && [ "$pr_number" != "null" ]; then
            author=$(gh pr view "$pr_number" --json author --jq '.author.login' 2>/dev/null || echo "")
            pr_reviewers=$(gh pr view "$pr_number" --json reviews --jq '.reviews[].author.login' 2>/dev/null | sort -u | tr '\n' ',' || echo "")
            reviewers="${pr_reviewers%,}"
          fi
          
          if [ -z "$author" ]; then
            author=$(git log -1 --pretty=%an "${{ github.sha }}" 2>/dev/null || echo "")
          fi
          
          author_email=$(git log -1 --pretty=%ae "${{ github.sha }}" 2>/dev/null || echo "")
          author_name=$(git log -1 --pretty=%an "${{ github.sha }}" 2>/dev/null || echo "")
          
          if [ -n "$author" ]; then
            if [ -n "$reviewers" ]; then
              reviewers="${author},${reviewers}"
            else
              reviewers="$author"
            fi
          fi
          
          if [ -f .github/renovate.json ]; then
            renovate_reviewers=$(jq -r '.reviewers | join(",")' .github/renovate.json 2>/dev/null || echo "")
            if [ -n "$renovate_reviewers" ]; then
              if [ -n "$reviewers" ]; then
                reviewers="${reviewers},${renovate_reviewers}"
              else
                reviewers="$renovate_reviewers"
              fi
            fi
          fi
          
          echo "reviewers=$reviewers" >> "$GITHUB_OUTPUT"
          echo "author_name=$author_name" >> "$GITHUB_OUTPUT"
          echo "author_email=$author_email" >> "$GITHUB_OUTPUT"
      
      - uses: peter-evans/create-pull-request@v7.0.8
        with:
          token: ${{ secrets.ACTIONS_GITHUB_TOKEN }}
          commit-message: |
            ${{ steps.prepare_pr.outputs.commit_title }}
            Co-authored-by: ${{ steps.prepare_pr.outputs.author_name }} <${{ steps.prepare_pr.outputs.author_email }}>
          base: ${{ steps.prepare_branch.outputs.name }}
          branch: backport/${{ github.sha }}
          title: "Backport: ${{ steps.prepare_pr.outputs.commit_title }}"
          body: Automated backport of commit ${{ github.sha }}
          reviewers: ${{ steps.prepare_pr.outputs.reviewers }}
          delete-branch: true
