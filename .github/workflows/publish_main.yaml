name: Publish

on:
  push:
    branches: main
    paths: 'VERSION'
  workflow_dispatch:

jobs:
  _test:
    uses: ./.github/workflows/test.yaml

  publish:
    needs: [_test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: echo "version=$(cat VERSION)" >> "$GITHUB_OUTPUT"
        id: version
      - uses: actions/download-artifact@v4
        with:
          name: package.deb
      - uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.ACTIONS_GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.version }}
          release_name: Release v${{ steps.version.outputs.version }}
          draft: false
          prerelease: false
      - uses: actions/upload-release-asset@v1
        id: upload-release-asset
        env:
          GITHUB_TOKEN: ${{ secrets.ACTIONS_GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./package.deb
          asset_name: opentelemetry-shell_${{ steps.version.outputs.version }}.deb
          asset_content_type: application/octet-stream

  demo-prepare:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.demos.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
      - run: |
          cd demos && echo */ | tr ' ' '\n' | tr -d / | jq -nR '{"include": [inputs | select(length > 0) | {demo_directory: .}]}' | tr -d '\n' | xargs -0 -I {} echo 'matrix={}' >> "$GITHUB_OUTPUT"
        id: demos

  demo-generate:
    needs: [ demo-prepare, publish ]
    runs-on: ubuntu-latest
    strategy: 
      matrix: ${{ fromJSON(needs.demo-prepare.outputs.matrix) }}
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: package.deb
      - run: sudo apt-get update && sudo apt-get install -y ./package.deb && rm ./package.deb
      - uses: actions/checkout@v4
      - id: demo
        run: |
          set +o pipefail
          cd demos/${{ matrix.demo_directory }}
          otlp="$(mktemp)"
          stdout="$(mktemp)"
          stderr="$(mktemp)"
          echo "
          receivers:
            otlp:
              protocols:
                grpc:
                  endpoint: 0.0.0.0:4317
                http:
                  endpoint: 0.0.0.0:4318
          processors:
            batch:
          exporters:
            file:
              path: /etc/otelcol/otlp.json
          service:
            pipelines:
              traces:
                receivers: [otlp]
                exporters: [file]
                processors: [batch]
          " > config.yaml
          touch otlp.json && chmod 0666 otlp.json
          sudo docker create --rm --mount type=bind,source=$(pwd)/config.yaml,target=/etc/otelcol/config.yaml --mount type=bind,source=$(pwd)/otlp.json,target=/etc/otelcol/otlp.json --network=host --name=collector otel/opentelemetry-collector:latest
          sudo docker start collector
          sleep 10
          cat meta.json | jq -r .setup | (grep -v '^null$' || true) | sh
          bash -e demo.sh 1> "$stdout" 2> "$stderr" || true
          sleep 15
          sudo docker stop collector
          echo "STDOUT=$stdout" >> "$GITHUB_OUTPUT"
          echo "STDERR=$stderr" >> "$GITHUB_OUTPUT"
          echo "OTLP=$otlp" >> "$GITHUB_OUTPUT"
          rm config.yaml
          rm otlp.json
      - env:
          STDOUT: ${{ steps.demo.outputs.STDOUT }}
          STDERR: ${{ steps.demo.outputs.STDERR }}
          OTLP: ${{ steps.demo.outputs.OTLP }}
          GITHUB_TOKEN: ${{ secrets.ACTIONS_GITHUB_TOKEN }}
        run: |
          set +o pipefail
          cd demos/${{ matrix.demo_directory }}

          spans() {
            jq '.resourceSpans.[].scopeSpans.[].spans.[]' < "$OTLP"
          }

          convert_span_id_to_name() {
            spans | jq -r '. | select(.spanId == "'"$1"'") | .name'
          }

          get_root_span_id() {
            spans | jq -r '. | select(.name != null) | select(.parentSpanId == "") | .spanId'
          }

          get_child_span_ids() {
            spans | jq -r '. | select(.name != null) | select(.parentSpanId == "'"$1"'") | .spanId'
          }

          print_span_name_tree() {
            local span_id="$1"
            local indent="$2"
            printf '%s' "$indent"; convert_span_id_to_name "$span_id"
            get_child_span_ids "$span_id" | while read -r child_span_id; do
              print_span_name_tree "$child_span_id" "$indent  "
            done
          }

          {
            echo '# Demo "'"$(cat ./meta.json | jq -r .title)"'"'
            cat meta.json | jq -r .description
            echo '## Script'
            echo '```sh'
            cat demo.sh
            echo '```'
            echo '## Standard Out'
            echo '```'
            cat "$STDOUT"
            echo '```'
            echo '## Standard Error'
            echo '```'
            cat "$STDERR"
            echo '```'
            echo '## Trace Overview'
            echo '```'
            print_span_name_tree "$(get_root_span_id)" ""
            echo '```'
            echo '## Full OTLP Data'
            echo '```json'
            cat "$OTLP" | jq .
            echo '```'
          } > README.md
      - run: cat demos/${{ matrix.demo_directory }}/README.md
      - run: |
          cd demos/${{ matrix.demo_directory }}
          git add --intent-to-add README.md
          git diff
          git diff | grep -v '^+++' | grep -v '^---' | grep -v Id | grep -v _id | grep -v .id | grep -v Time | grep -v _time | grep -v timestamp | grep -v github. | grep -v telemetry.sdk.version | grep -v process.pid | grep -v process.parent_pid | grep -q '^+' && echo dirty=true >> "$GITHUB_OUTPUT" || true
        id: diff
      - name: "Resolve Reviewers"
        if: steps.diff.outputs.dirty
        id: reviewers
        run: |
          if ! [ -f .github/renovate.json ]; then exit 0; fi
          echo "reviewers=$(cat .github/renovate.json | jq -r '.reviewers | join(",")')" >> "$GITHUB_OUTPUT"
      - name: "Open Pull Request"
        if: steps.diff.outputs.dirty
        id: open-pr
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.ACTIONS_GITHUB_TOKEN }}
          commit-message: "Update demo"
          branch: "demos/${{ matrix.demo_directory }}"
          title: "Update Demo ${{ matrix.demo_directory }}"
          body: |
            (this PR is automatically generated)
          reviewers: ${{ steps.reviewers.outputs.reviewers }}
          delete-branch: true
      - uses: peter-evans/enable-pull-request-automerge@v3
        if: steps.open-pr.outputs.pull-request-number != null
        with:
          token: ${{ secrets.ACTIONS_GITHUB_TOKEN }}
          pull-request-number: ${{ steps.open-pr.outputs.pull-request-number }}
          merge-method: squash
